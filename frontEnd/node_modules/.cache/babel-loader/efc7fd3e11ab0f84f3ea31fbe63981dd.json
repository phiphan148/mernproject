{"ast":null,"code":"function getCities() {\n  return fetch(\"/products\").then(handleErrors).then(function (res) {\n    return res.json();\n  });\n}\n\nfunction fakeGetProducts() {\n  return new Promise(function (resolve) {\n    // Resolve after a timeout so we can see the loading indicator\n    setTimeout(function () {\n      return resolve({\n        products: [{\n          id: 0,\n          name: \"Apple\"\n        }, {\n          id: 1,\n          name: \"Bananas\"\n        }, {\n          id: 2,\n          name: \"Strawberries\"\n        }]\n      });\n    }, 1000);\n  });\n}\n\nexport function fetchCities() {\n  return function (dispatch) {\n    dispatch(fetchCitiesBegin());\n    return fetch(\"http://localhost:5000/cities\").then(function (json) {\n      dispatch(fetchCitiesSuccess(json.cities));\n      return json.cities;\n    }).catch(function (error) {\n      return dispatch(fetchCitiesFailure(error));\n    });\n  };\n} // Handle HTTP errors since fetch won't.\n// function handleErrors(response) {\n//     if (!response.ok) {\n//         throw Error(response.statusText);\n//     }\n//     return response;\n// }\n\nexport var FETCH_CITIES_BEGIN = \"FETCH_CITIES_BEGIN\";\nexport var FETCH_CITIES_SUCCESS = \"FETCH_CITIES_SUCCESS\";\nexport var FETCH_CITIES_FAILURE = \"FETCH_CITIES_FAILURE\";\nexport var fetchCitiesBegin = function fetchCitiesBegin() {\n  return {\n    type: FETCH_CITIES_BEGIN\n  };\n};\nexport var fetchCitiesSuccess = function fetchCitiesSuccess(cities) {\n  return {\n    type: FETCH_CITIES_SUCCESS,\n    payload: {\n      cities: cities\n    }\n  };\n};\nexport var fetchCitiesFailure = function fetchCitiesFailure(error) {\n  return {\n    type: FETCH_CITIES_FAILURE,\n    payload: {\n      error: error\n    }\n  };\n};","map":{"version":3,"sources":["/Users/PhiPhan/Documents/Ubiqum/reactjs/mernproject/frontEnd/src/actions/cityActions.js"],"names":["getCities","fetch","then","handleErrors","res","json","fakeGetProducts","Promise","resolve","setTimeout","products","id","name","fetchCities","dispatch","fetchCitiesBegin","fetchCitiesSuccess","cities","catch","error","fetchCitiesFailure","FETCH_CITIES_BEGIN","FETCH_CITIES_SUCCESS","FETCH_CITIES_FAILURE","type","payload"],"mappings":"AAAA,SAASA,SAAT,GAAqB;AACjB,SAAOC,KAAK,CAAC,WAAD,CAAL,CACFC,IADE,CACGC,YADH,EAEFD,IAFE,CAEG,UAAAE,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GAFN,CAAP;AAGH;;AAED,SAASC,eAAT,GAA2B;AACvB,SAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC1B;AACAC,IAAAA,UAAU,CACN;AAAA,aACID,OAAO,CAAC;AACJE,QAAAA,QAAQ,EAAE,CACN;AACIC,UAAAA,EAAE,EAAE,CADR;AAEIC,UAAAA,IAAI,EAAE;AAFV,SADM,EAKN;AACID,UAAAA,EAAE,EAAE,CADR;AAEIC,UAAAA,IAAI,EAAE;AAFV,SALM,EASN;AACID,UAAAA,EAAE,EAAE,CADR;AAEIC,UAAAA,IAAI,EAAE;AAFV,SATM;AADN,OAAD,CADX;AAAA,KADM,EAkBN,IAlBM,CAAV;AAoBH,GAtBM,CAAP;AAuBH;;AAED,OAAO,SAASC,WAAT,GAAuB;AAC1B,SAAO,UAAAC,QAAQ,EAAI;AACfA,IAAAA,QAAQ,CAACC,gBAAgB,EAAjB,CAAR;AACA,WAAOd,KAAK,CAAC,8BAAD,CAAL,CACFC,IADE,CACG,UAAAG,IAAI,EAAI;AACVS,MAAAA,QAAQ,CAACE,kBAAkB,CAACX,IAAI,CAACY,MAAN,CAAnB,CAAR;AACA,aAAOZ,IAAI,CAACY,MAAZ;AACH,KAJE,EAKFC,KALE,CAKI,UAAAC,KAAK;AAAA,aACRL,QAAQ,CAACM,kBAAkB,CAACD,KAAD,CAAnB,CADA;AAAA,KALT,CAAP;AAQH,GAVD;AAWH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAME,kBAAkB,GAAG,oBAA3B;AACP,OAAO,IAAMC,oBAAoB,GAC7B,sBADG;AAEP,OAAO,IAAMC,oBAAoB,GAC7B,sBADG;AAGP,OAAO,IAAMR,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,SAAO;AACnCS,IAAAA,IAAI,EAAEH;AAD6B,GAAP;AAAA,CAAzB;AAIP,OAAO,IAAML,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,MAAM;AAAA,SAAK;AACzCO,IAAAA,IAAI,EAAEF,oBADmC;AAEzCG,IAAAA,OAAO,EAAE;AAAER,MAAAA,MAAM,EAANA;AAAF;AAFgC,GAAL;AAAA,CAAjC;AAKP,OAAO,IAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAD,KAAK;AAAA,SAAK;AACxCK,IAAAA,IAAI,EAAED,oBADkC;AAExCE,IAAAA,OAAO,EAAE;AAAEN,MAAAA,KAAK,EAALA;AAAF;AAF+B,GAAL;AAAA,CAAhC","sourcesContent":["function getCities() {\n    return fetch(\"/products\")\n        .then(handleErrors)\n        .then(res => res.json());\n}\n\nfunction fakeGetProducts() {\n    return new Promise(resolve => {\n        // Resolve after a timeout so we can see the loading indicator\n        setTimeout(\n            () =>\n                resolve({\n                    products: [\n                        {\n                            id: 0,\n                            name: \"Apple\"\n                        },\n                        {\n                            id: 1,\n                            name: \"Bananas\"\n                        },\n                        {\n                            id: 2,\n                            name: \"Strawberries\"\n                        }\n                    ]\n                }),\n            1000\n        );\n    });\n}\n\nexport function fetchCities() {\n    return dispatch => {\n        dispatch(fetchCitiesBegin());\n        return fetch(\"http://localhost:5000/cities\")\n            .then(json => {\n                dispatch(fetchCitiesSuccess(json.cities));\n                return json.cities;\n            })\n            .catch(error =>\n                dispatch(fetchCitiesFailure(error))\n            );\n    };\n}\n\n// Handle HTTP errors since fetch won't.\n// function handleErrors(response) {\n//     if (!response.ok) {\n//         throw Error(response.statusText);\n//     }\n//     return response;\n// }\n\nexport const FETCH_CITIES_BEGIN = \"FETCH_CITIES_BEGIN\";\nexport const FETCH_CITIES_SUCCESS =\n    \"FETCH_CITIES_SUCCESS\";\nexport const FETCH_CITIES_FAILURE =\n    \"FETCH_CITIES_FAILURE\";\n\nexport const fetchCitiesBegin = () => ({\n    type: FETCH_CITIES_BEGIN\n});\n\nexport const fetchCitiesSuccess = cities => ({\n    type: FETCH_CITIES_SUCCESS,\n    payload: { cities }\n});\n\nexport const fetchCitiesFailure = error => ({\n    type: FETCH_CITIES_FAILURE,\n    payload: { error }\n});\n"]},"metadata":{},"sourceType":"module"}