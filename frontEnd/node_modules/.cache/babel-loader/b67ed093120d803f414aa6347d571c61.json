{"ast":null,"code":"import _objectSpread from \"/Users/PhiPhan/Documents/Ubiqum/reactjs/mernproject/frontEnd/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar initState = {\n  cities: []\n};\nexport default function productReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"FETCH_REQUEST\":\n      return state;\n\n    case \"FETCH_SUCCESS\":\n      return _objectSpread({}, state, {\n        cities: action.payload\n      });\n\n    default:\n      return state;\n  }\n} // import {\n//     FETCH_PRODUCTS_BEGIN,\n//     FETCH_PRODUCTS_SUCCESS,\n//     FETCH_PRODUCTS_FAILURE\n// } from \"../actions/cityActions\";\n//\n// const initialState = {\n//     items: [],\n//     loading: false,\n//     error: null\n// };\n//\n// export default function productReducer(\n//     state = initialState,\n//     action\n// ) {\n//     switch (action.type) {\n//         case FETCH_PRODUCTS_BEGIN:\n//             // Mark the state as \"loading\" so we can show a spinner or something\n//             // Also, reset any errors. We're starting fresh.\n//             return {\n//                 ...state,\n//                 loading: true,\n//                 error: null\n//             };\n//\n//         case FETCH_PRODUCTS_SUCCESS:\n//             // All done: set loading \"false\".\n//             // Also, replace the items with the ones from the server\n//             return {\n//                 ...state,\n//                 loading: false,\n//                 items: action.payload.products\n//             };\n//\n//         case FETCH_PRODUCTS_FAILURE:\n//             // The request failed, but it did stop, so set loading to \"false\".\n//             // Save the error, and we can display it somewhere\n//             // Since it failed, we don't have items to display anymore, so set it empty.\n//             // This is up to you and your app though: maybe you want to keep the items\n//             // around! Do whatever seems right.\n//             return {\n//                 ...state,\n//                 loading: false,\n//                 error: action.payload.error,\n//                 items: []\n//             };\n//\n//         default:\n//             // ALWAYS have a default case in a reducer\n//             return state;\n//     }\n// }","map":{"version":3,"sources":["/Users/PhiPhan/Documents/Ubiqum/reactjs/mernproject/frontEnd/src/reducers/cityReducer.js"],"names":["initState","cities","productReducer","state","action","type","payload"],"mappings":";AAAA,IAAMA,SAAS,GAAG;AACdC,EAAAA,MAAM,EAAE;AADM,CAAlB;AAIA,eAAe,SAASC,cAAT,GAAmD;AAAA,MAA3BC,KAA2B,uEAAnBH,SAAmB;AAAA,MAARI,MAAQ;;AAC9D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,eAAL;AACI,aAAOF,KAAP;;AACJ,SAAK,eAAL;AACI,+BAAWA,KAAX;AAAkBF,QAAAA,MAAM,EAAEG,MAAM,CAACE;AAAjC;;AACJ;AACI,aAAOH,KAAP;AANR;AAQH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["const initState = {\n    cities: []\n};\n\nexport default function productReducer(state = initState, action) {\n    switch (action.type) {\n        case \"FETCH_REQUEST\":\n            return state;\n        case \"FETCH_SUCCESS\":\n            return {...state, cities: action.payload};\n        default:\n            return state\n    }\n}\n\n// import {\n//     FETCH_PRODUCTS_BEGIN,\n//     FETCH_PRODUCTS_SUCCESS,\n//     FETCH_PRODUCTS_FAILURE\n// } from \"../actions/cityActions\";\n//\n// const initialState = {\n//     items: [],\n//     loading: false,\n//     error: null\n// };\n//\n// export default function productReducer(\n//     state = initialState,\n//     action\n// ) {\n//     switch (action.type) {\n//         case FETCH_PRODUCTS_BEGIN:\n//             // Mark the state as \"loading\" so we can show a spinner or something\n//             // Also, reset any errors. We're starting fresh.\n//             return {\n//                 ...state,\n//                 loading: true,\n//                 error: null\n//             };\n//\n//         case FETCH_PRODUCTS_SUCCESS:\n//             // All done: set loading \"false\".\n//             // Also, replace the items with the ones from the server\n//             return {\n//                 ...state,\n//                 loading: false,\n//                 items: action.payload.products\n//             };\n//\n//         case FETCH_PRODUCTS_FAILURE:\n//             // The request failed, but it did stop, so set loading to \"false\".\n//             // Save the error, and we can display it somewhere\n//             // Since it failed, we don't have items to display anymore, so set it empty.\n//             // This is up to you and your app though: maybe you want to keep the items\n//             // around! Do whatever seems right.\n//             return {\n//                 ...state,\n//                 loading: false,\n//                 error: action.payload.error,\n//                 items: []\n//             };\n//\n//         default:\n//             // ALWAYS have a default case in a reducer\n//             return state;\n//     }\n// }\n"]},"metadata":{},"sourceType":"module"}