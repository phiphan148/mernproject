{"ast":null,"code":"function getCities() {\n  return fetch(\"/products\").then(handleErrors).then(function (res) {\n    return res.json();\n  });\n}\n\nfunction fakeGetProducts() {\n  return new Promise(function (resolve) {\n    // Resolve after a timeout so we can see the loading indicator\n    setTimeout(function () {\n      return resolve({\n        products: [{\n          id: 0,\n          name: \"Apple\"\n        }, {\n          id: 1,\n          name: \"Bananas\"\n        }, {\n          id: 2,\n          name: \"Strawberries\"\n        }]\n      });\n    }, 1000);\n  });\n}\n\nexport function fetchProducts() {\n  return function (dispatch) {\n    dispatch(fetchProductsBegin());\n    return fakeGetProducts().then(function (json) {\n      dispatch(fetchProductsSuccess(json.products));\n      return json.products;\n    }).catch(function (error) {\n      return dispatch(fetchProductsFailure(error));\n    });\n  };\n} // Handle HTTP errors since fetch won't.\n\nfunction handleErrors(response) {\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n\n  return response;\n}\n\nexport var FETCH_PRODUCTS_BEGIN = \"FETCH_PRODUCTS_BEGIN\";\nexport var FETCH_PRODUCTS_SUCCESS = \"FETCH_PRODUCTS_SUCCESS\";\nexport var FETCH_PRODUCTS_FAILURE = \"FETCH_PRODUCTS_FAILURE\";\nexport var fetchProductsBegin = function fetchProductsBegin() {\n  return {\n    type: FETCH_PRODUCTS_BEGIN\n  };\n};\nexport var fetchProductsSuccess = function fetchProductsSuccess(products) {\n  return {\n    type: FETCH_PRODUCTS_SUCCESS,\n    payload: {\n      products: products\n    }\n  };\n};\nexport var fetchProductsFailure = function fetchProductsFailure(error) {\n  return {\n    type: FETCH_PRODUCTS_FAILURE,\n    payload: {\n      error: error\n    }\n  };\n};","map":{"version":3,"sources":["/Users/PhiPhan/Documents/Ubiqum/reactjs/mernproject/frontEnd/src/actions/cityActions.js"],"names":["getCities","fetch","then","handleErrors","res","json","fakeGetProducts","Promise","resolve","setTimeout","products","id","name","fetchProducts","dispatch","fetchProductsBegin","fetchProductsSuccess","catch","error","fetchProductsFailure","response","ok","Error","statusText","FETCH_PRODUCTS_BEGIN","FETCH_PRODUCTS_SUCCESS","FETCH_PRODUCTS_FAILURE","type","payload"],"mappings":"AAAA,SAASA,SAAT,GAAqB;AACjB,SAAOC,KAAK,CAAC,WAAD,CAAL,CACFC,IADE,CACGC,YADH,EAEFD,IAFE,CAEG,UAAAE,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GAFN,CAAP;AAGH;;AAED,SAASC,eAAT,GAA2B;AACvB,SAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC1B;AACAC,IAAAA,UAAU,CACN;AAAA,aACID,OAAO,CAAC;AACJE,QAAAA,QAAQ,EAAE,CACN;AACIC,UAAAA,EAAE,EAAE,CADR;AAEIC,UAAAA,IAAI,EAAE;AAFV,SADM,EAKN;AACID,UAAAA,EAAE,EAAE,CADR;AAEIC,UAAAA,IAAI,EAAE;AAFV,SALM,EASN;AACID,UAAAA,EAAE,EAAE,CADR;AAEIC,UAAAA,IAAI,EAAE;AAFV,SATM;AADN,OAAD,CADX;AAAA,KADM,EAkBN,IAlBM,CAAV;AAoBH,GAtBM,CAAP;AAuBH;;AAED,OAAO,SAASC,aAAT,GAAyB;AAC5B,SAAO,UAAAC,QAAQ,EAAI;AACfA,IAAAA,QAAQ,CAACC,kBAAkB,EAAnB,CAAR;AACA,WAAOT,eAAe,GACjBJ,IADE,CACG,UAAAG,IAAI,EAAI;AACVS,MAAAA,QAAQ,CAACE,oBAAoB,CAACX,IAAI,CAACK,QAAN,CAArB,CAAR;AACA,aAAOL,IAAI,CAACK,QAAZ;AACH,KAJE,EAKFO,KALE,CAKI,UAAAC,KAAK;AAAA,aACRJ,QAAQ,CAACK,oBAAoB,CAACD,KAAD,CAArB,CADA;AAAA,KALT,CAAP;AAQH,GAVD;AAWH,C,CAED;;AACA,SAASf,YAAT,CAAsBiB,QAAtB,EAAgC;AAC5B,MAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AACd,UAAMC,KAAK,CAACF,QAAQ,CAACG,UAAV,CAAX;AACH;;AACD,SAAOH,QAAP;AACH;;AAED,OAAO,IAAMI,oBAAoB,GAAG,sBAA7B;AACP,OAAO,IAAMC,sBAAsB,GAC/B,wBADG;AAEP,OAAO,IAAMC,sBAAsB,GAC/B,wBADG;AAGP,OAAO,IAAMX,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,SAAO;AACrCY,IAAAA,IAAI,EAAEH;AAD+B,GAAP;AAAA,CAA3B;AAIP,OAAO,IAAMR,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAN,QAAQ;AAAA,SAAK;AAC7CiB,IAAAA,IAAI,EAAEF,sBADuC;AAE7CG,IAAAA,OAAO,EAAE;AAAElB,MAAAA,QAAQ,EAARA;AAAF;AAFoC,GAAL;AAAA,CAArC;AAKP,OAAO,IAAMS,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAD,KAAK;AAAA,SAAK;AAC1CS,IAAAA,IAAI,EAAED,sBADoC;AAE1CE,IAAAA,OAAO,EAAE;AAAEV,MAAAA,KAAK,EAALA;AAAF;AAFiC,GAAL;AAAA,CAAlC","sourcesContent":["function getCities() {\n    return fetch(\"/products\")\n        .then(handleErrors)\n        .then(res => res.json());\n}\n\nfunction fakeGetProducts() {\n    return new Promise(resolve => {\n        // Resolve after a timeout so we can see the loading indicator\n        setTimeout(\n            () =>\n                resolve({\n                    products: [\n                        {\n                            id: 0,\n                            name: \"Apple\"\n                        },\n                        {\n                            id: 1,\n                            name: \"Bananas\"\n                        },\n                        {\n                            id: 2,\n                            name: \"Strawberries\"\n                        }\n                    ]\n                }),\n            1000\n        );\n    });\n}\n\nexport function fetchProducts() {\n    return dispatch => {\n        dispatch(fetchProductsBegin());\n        return fakeGetProducts()\n            .then(json => {\n                dispatch(fetchProductsSuccess(json.products));\n                return json.products;\n            })\n            .catch(error =>\n                dispatch(fetchProductsFailure(error))\n            );\n    };\n}\n\n// Handle HTTP errors since fetch won't.\nfunction handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n    return response;\n}\n\nexport const FETCH_PRODUCTS_BEGIN = \"FETCH_PRODUCTS_BEGIN\";\nexport const FETCH_PRODUCTS_SUCCESS =\n    \"FETCH_PRODUCTS_SUCCESS\";\nexport const FETCH_PRODUCTS_FAILURE =\n    \"FETCH_PRODUCTS_FAILURE\";\n\nexport const fetchProductsBegin = () => ({\n    type: FETCH_PRODUCTS_BEGIN\n});\n\nexport const fetchProductsSuccess = products => ({\n    type: FETCH_PRODUCTS_SUCCESS,\n    payload: { products }\n});\n\nexport const fetchProductsFailure = error => ({\n    type: FETCH_PRODUCTS_FAILURE,\n    payload: { error }\n});\n"]},"metadata":{},"sourceType":"module"}