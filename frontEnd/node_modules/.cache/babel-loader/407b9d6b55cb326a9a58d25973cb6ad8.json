{"ast":null,"code":"import _classCallCheck from \"/Users/PhiPhan/Documents/Ubiqum/reactjs/mernproject/frontEnd/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/PhiPhan/Documents/Ubiqum/reactjs/mernproject/frontEnd/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/PhiPhan/Documents/Ubiqum/reactjs/mernproject/frontEnd/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/PhiPhan/Documents/Ubiqum/reactjs/mernproject/frontEnd/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/PhiPhan/Documents/Ubiqum/reactjs/mernproject/frontEnd/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/PhiPhan/Documents/Ubiqum/reactjs/mernproject/frontEnd/src/views/Cities.js\";\nimport React from 'react';\nimport { fetchCitiesWithRedux } from \"../actions/cityActions\";\nimport { connect } from 'react-redux';\n\nvar Cities =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Cities, _React$Component);\n\n  function Cities() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Cities);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Cities)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.filterCities = function (cityFilter) {\n      var cities = _this.props.cities;\n      var filteredCities = cities.filter(function (city) {\n        var poetName = poet.firstName.toLowerCase() + poet.lastName.toLowerCase();\n        return poetName.indexOf(poetFilter.toLowerCase()) !== -1;\n      });\n\n      _this.setState({\n        filteredPoets: filteredPoets\n      });\n    };\n\n    _this.listItems = function () {\n      var listItems = _this.props.cities.map(function (city) {\n        return React.createElement(\"div\", {\n          className: \"cityPhotoHolder\",\n          key: city._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"cityName\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        }, city.name), React.createElement(\"img\", {\n          className: \"cityDisplay\",\n          src: city.src,\n          alt: \"img\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        }));\n      });\n\n      return listItems;\n    };\n\n    return _this;\n  }\n\n  _createClass(Cities, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.dispatch(fetchCitiesWithRedux());\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"contain cityDisplay\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, this.listItems());\n    }\n  }]);\n\n  return Cities;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    cities: state.cityReducer.cities,\n    loading: state.cityReducer.loading,\n    error: state.cityReducer.error,\n    cityName: state.cityReducer.cityName\n  };\n};\n\nexport default connect(mapStateToProps)(Cities);","map":{"version":3,"sources":["/Users/PhiPhan/Documents/Ubiqum/reactjs/mernproject/frontEnd/src/views/Cities.js"],"names":["React","fetchCitiesWithRedux","connect","Cities","filterCities","cityFilter","cities","props","filteredCities","filter","city","poetName","poet","firstName","toLowerCase","lastName","indexOf","poetFilter","setState","filteredPoets","listItems","map","_id","name","src","dispatch","Component","mapStateToProps","state","cityReducer","loading","error","cityName"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,QAAqC,wBAArC;AACA,SAAQC,OAAR,QAAsB,aAAtB;;IAEMC,M;;;;;;;;;;;;;;;;;;UAKFC,Y,GAAe,UAACC,UAAD,EAAgB;AAC3B,UAAIC,MAAM,GAAG,MAAKC,KAAL,CAAWD,MAAxB;AACA,UAAIE,cAAc,GAAGF,MAAM,CAACG,MAAP,CAAc,UAACC,IAAD,EAAU;AACzC,YAAIC,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAeC,WAAf,KAA+BF,IAAI,CAACG,QAAL,CAAcD,WAAd,EAA9C;AACA,eAAOH,QAAQ,CAACK,OAAT,CACHC,UAAU,CAACH,WAAX,EADG,MAC2B,CAAC,CADnC;AAEH,OAJoB,CAArB;;AAKA,YAAKI,QAAL,CAAc;AACVC,QAAAA,aAAa,EAAbA;AADU,OAAd;AAGH,K;;UAEDC,S,GAAY,YAAM;AACd,UAAMA,SAAS,GAAG,MAAKb,KAAL,CAAWD,MAAX,CAAkBe,GAAlB,CAAsB,UAACX,IAAD;AAAA,eACpC;AAAK,UAAA,SAAS,EAAC,iBAAf;AAAiC,UAAA,GAAG,EAAEA,IAAI,CAACY,GAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAG,UAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAyBZ,IAAI,CAACa,IAA9B,CADJ,EAEI;AAAK,UAAA,SAAS,EAAC,aAAf;AAA6B,UAAA,GAAG,EAAEb,IAAI,CAACc,GAAvC;AAA4C,UAAA,GAAG,EAAC,KAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ,CADoC;AAAA,OAAtB,CAAlB;;AAMA,aAAOJ,SAAP;AACH,K;;;;;;;wCAxBkB;AACf,WAAKb,KAAL,CAAWkB,QAAX,CAAoBxB,oBAAoB,EAAxC;AACH;;;6BAwBQ;AACL,aACA;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKmB,SAAL,EADL,CADA;AAKH;;;;EAjCgBpB,KAAK,CAAC0B,S;;AAqC3B,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK;AAC9BtB,IAAAA,MAAM,EAAEsB,KAAK,CAACC,WAAN,CAAkBvB,MADI;AAE9BwB,IAAAA,OAAO,EAAEF,KAAK,CAACC,WAAN,CAAkBC,OAFG;AAG9BC,IAAAA,KAAK,EAAEH,KAAK,CAACC,WAAN,CAAkBE,KAHK;AAI9BC,IAAAA,QAAQ,EAAEJ,KAAK,CAACC,WAAN,CAAkBG;AAJE,GAAL;AAAA,CAA7B;;AAOA,eAAe9B,OAAO,CAACyB,eAAD,CAAP,CAAyBxB,MAAzB,CAAf","sourcesContent":["import React from 'react';\nimport { fetchCitiesWithRedux } from \"../actions/cityActions\";\nimport {connect} from 'react-redux';\n\nclass Cities extends React.Component {\n    componentDidMount(){\n        this.props.dispatch(fetchCitiesWithRedux());\n    };\n\n    filterCities = (cityFilter) => {\n        let cities = this.props.cities\n        let filteredCities = cities.filter((city) => {\n            let poetName = poet.firstName.toLowerCase() + poet.lastName.toLowerCase()\n            return poetName.indexOf(\n                poetFilter.toLowerCase()) !== -1\n        })\n        this.setState({\n            filteredPoets\n        })\n    }\n\n    listItems = () => {\n        const listItems = this.props.cities.map((city) =>\n            <div className=\"cityPhotoHolder\" key={city._id}>\n                <p className=\"cityName\">{city.name}</p>\n                <img className=\"cityDisplay\" src={city.src} alt=\"img\"/>\n            </div>\n        );\n        return listItems;\n    };\n\n    render() {\n        return (\n        <div className=\"contain cityDisplay\">\n            {this.listItems()}\n        </div>\n    )\n    }\n}\n\n\nconst mapStateToProps = state => ({\n    cities: state.cityReducer.cities,\n    loading: state.cityReducer.loading,\n    error: state.cityReducer.error,\n    cityName: state.cityReducer.cityName\n});\n\nexport default connect(mapStateToProps)(Cities)\n"]},"metadata":{},"sourceType":"module"}