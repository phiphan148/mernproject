{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport cities from \"./cityReducer\";\ncombineReducers({\n  cities: cities\n});\n\nvar rootReducer = function rootReducer() {// switch (action.type) {\n  //     case \"FETCH_REQUEST\":\n  //         return state;\n  //     case \"FETCH_SUCCESS\":\n  //         return {...state, cities: action.payload};\n  //     default:\n  //         return state;\n  // }\n\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n};\n\nexport default rootReducer; // const initState = {\n//     posts: [\n//         {id: 1, title: 'Squirtle Laid an Egg', body: 'Lorem ipsum'},\n//         {id: 2, title: 'Charmander Laid an Egg', body: 'Lorem ipsum'},\n//         {id: 3, title: 'a Helix Fossil was Found', body: 'Lorem ipsum'}\n//     ]\n// };\n//\n// const rootReducer = (state = initState, action) => {\n//    if(action.type === 'DELETE_POST') {\n//        let newPosts = state.posts.filter(post=> {\n//            return action.id !== post.id\n//        });\n//        return {\n//            ...state,\n//            posts: newPosts\n//        }\n//    }\n//     return state;\n// };\n//\n// export default rootReducer;\n//\n// const initState = {\n//     cities: []\n// };\n//\n// const rootReducer = (state = initState, action) => {\n//    if(action.type === 'DELETE_POST') {\n//        let newPosts = state.posts.filter(post=> {\n//            return action.id !== post.id\n//        });\n//        return {\n//            ...state,\n//            posts: newPosts\n//        }\n//    }\n//     return state;\n// };\n// const rootReducer = (state = initState, action) => {\n//     switch (action.type) {\n//         case \"FETCH_REQUEST\":\n//             return state;\n//         case \"FETCH_SUCCESS\":\n//             return {...state, cities: action.payload};\n//         default:\n//             return state;\n//     }\n// };\n// export default rootReducer;","map":{"version":3,"sources":["/Users/PhiPhan/Documents/Ubiqum/reactjs/mernproject/frontEnd/src/reducers/rootReducer.js"],"names":["combineReducers","cities","rootReducer","state","initState","action"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,eAAnB;AAEAD,eAAe,CAAC;AACZC,EAAAA,MAAM,EAANA;AADY,CAAD,CAAf;;AAIA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAA+B,CAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAR+C,MAA9BC,KAA8B,uEAAtBC,SAAsB;AAAA,MAAXC,MAAW;AASlD,CATD;;AAUA,eAAeH,WAAf,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { combineReducers } from \"redux\";\nimport cities from \"./cityReducer\";\n\ncombineReducers({\n    cities\n});\n\nconst rootReducer = (state = initState, action) => {\n    // switch (action.type) {\n    //     case \"FETCH_REQUEST\":\n    //         return state;\n    //     case \"FETCH_SUCCESS\":\n    //         return {...state, cities: action.payload};\n    //     default:\n    //         return state;\n    // }\n};\nexport default rootReducer;\n\n\n// const initState = {\n//     posts: [\n//         {id: 1, title: 'Squirtle Laid an Egg', body: 'Lorem ipsum'},\n//         {id: 2, title: 'Charmander Laid an Egg', body: 'Lorem ipsum'},\n//         {id: 3, title: 'a Helix Fossil was Found', body: 'Lorem ipsum'}\n//     ]\n// };\n//\n// const rootReducer = (state = initState, action) => {\n//    if(action.type === 'DELETE_POST') {\n//        let newPosts = state.posts.filter(post=> {\n//            return action.id !== post.id\n//        });\n//        return {\n//            ...state,\n//            posts: newPosts\n//        }\n//    }\n//     return state;\n// };\n//\n// export default rootReducer;\n//\n// const initState = {\n//     cities: []\n// };\n//\n// const rootReducer = (state = initState, action) => {\n//    if(action.type === 'DELETE_POST') {\n//        let newPosts = state.posts.filter(post=> {\n//            return action.id !== post.id\n//        });\n//        return {\n//            ...state,\n//            posts: newPosts\n//        }\n//    }\n//     return state;\n// };\n\n\n// const rootReducer = (state = initState, action) => {\n//     switch (action.type) {\n//         case \"FETCH_REQUEST\":\n//             return state;\n//         case \"FETCH_SUCCESS\":\n//             return {...state, cities: action.payload};\n//         default:\n//             return state;\n//     }\n// };\n// export default rootReducer;\n\n"]},"metadata":{},"sourceType":"module"}