{"ast":null,"code":"import _objectSpread from \"/Users/PhiPhan/Documents/Ubiqum/reactjs/mernproject/frontEnd/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n// const initState = {\n//     cities: []\n// };\n// export default function cityReducer(state = initState, action) {\n//     switch (action.type) {\n//         case \"FETCH_REQUEST\":\n//             return state;\n//         case \"FETCH_SUCCESS\":\n//             return {...state, cities: action.payload};\n//         default:\n//             return state\n//     }\n// }\nimport { FETCH_PRODUCTS_BEGIN, FETCH_PRODUCTS_SUCCESS, FETCH_PRODUCTS_FAILURE } from \"../actions/cityActions\";\nvar initialState = {\n  items: [],\n  loading: false,\n  error: null\n};\nexport default function productReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FETCH_PRODUCTS_BEGIN:\n      // Mark the state as \"loading\" so we can show a spinner or something\n      // Also, reset any errors. We're starting fresh.\n      return _objectSpread({}, state, {\n        loading: true,\n        error: null\n      });\n\n    case FETCH_PRODUCTS_SUCCESS:\n      // All done: set loading \"false\".\n      // Also, replace the items with the ones from the server\n      return _objectSpread({}, state, {\n        loading: false,\n        items: action.payload.products\n      });\n\n    case FETCH_PRODUCTS_FAILURE:\n      // The request failed, but it did stop, so set loading to \"false\".\n      // Save the error, and we can display it somewhere\n      // Since it failed, we don't have items to display anymore, so set it empty.\n      // This is up to you and your app though: maybe you want to keep the items\n      // around! Do whatever seems right.\n      return _objectSpread({}, state, {\n        loading: false,\n        error: action.payload.error,\n        items: []\n      });\n\n    default:\n      // ALWAYS have a default case in a reducer\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/PhiPhan/Documents/Ubiqum/reactjs/mernproject/frontEnd/src/reducers/cityReducer.js"],"names":["FETCH_PRODUCTS_BEGIN","FETCH_PRODUCTS_SUCCESS","FETCH_PRODUCTS_FAILURE","initialState","items","loading","error","productReducer","state","action","type","payload","products"],"mappings":";AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SACIA,oBADJ,EAEIC,sBAFJ,EAGIC,sBAHJ,QAIO,wBAJP;AAMA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,OAAO,EAAE,KAFQ;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB;AAMA,eAAe,SAASC,cAAT,GAGb;AAAA,MAFEC,KAEF,uEAFUL,YAEV;AAAA,MADEM,MACF;;AACE,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,oBAAL;AACI;AACA;AACA,+BACOQ,KADP;AAEIH,QAAAA,OAAO,EAAE,IAFb;AAGIC,QAAAA,KAAK,EAAE;AAHX;;AAMJ,SAAKL,sBAAL;AACI;AACA;AACA,+BACOO,KADP;AAEIH,QAAAA,OAAO,EAAE,KAFb;AAGID,QAAAA,KAAK,EAAEK,MAAM,CAACE,OAAP,CAAeC;AAH1B;;AAMJ,SAAKV,sBAAL;AACI;AACA;AACA;AACA;AACA;AACA,+BACOM,KADP;AAEIH,QAAAA,OAAO,EAAE,KAFb;AAGIC,QAAAA,KAAK,EAAEG,MAAM,CAACE,OAAP,CAAeL,KAH1B;AAIIF,QAAAA,KAAK,EAAE;AAJX;;AAOJ;AACI;AACA,aAAOI,KAAP;AAlCR;AAoCH","sourcesContent":["// const initState = {\n//     cities: []\n// };\n\n// export default function cityReducer(state = initState, action) {\n//     switch (action.type) {\n//         case \"FETCH_REQUEST\":\n//             return state;\n//         case \"FETCH_SUCCESS\":\n//             return {...state, cities: action.payload};\n//         default:\n//             return state\n//     }\n// }\n\nimport {\n    FETCH_PRODUCTS_BEGIN,\n    FETCH_PRODUCTS_SUCCESS,\n    FETCH_PRODUCTS_FAILURE\n} from \"../actions/cityActions\";\n\nconst initialState = {\n    items: [],\n    loading: false,\n    error: null\n};\n\nexport default function productReducer(\n    state = initialState,\n    action\n) {\n    switch (action.type) {\n        case FETCH_PRODUCTS_BEGIN:\n            // Mark the state as \"loading\" so we can show a spinner or something\n            // Also, reset any errors. We're starting fresh.\n            return {\n                ...state,\n                loading: true,\n                error: null\n            };\n\n        case FETCH_PRODUCTS_SUCCESS:\n            // All done: set loading \"false\".\n            // Also, replace the items with the ones from the server\n            return {\n                ...state,\n                loading: false,\n                items: action.payload.products\n            };\n\n        case FETCH_PRODUCTS_FAILURE:\n            // The request failed, but it did stop, so set loading to \"false\".\n            // Save the error, and we can display it somewhere\n            // Since it failed, we don't have items to display anymore, so set it empty.\n            // This is up to you and your app though: maybe you want to keep the items\n            // around! Do whatever seems right.\n            return {\n                ...state,\n                loading: false,\n                error: action.payload.error,\n                items: []\n            };\n\n        default:\n            // ALWAYS have a default case in a reducer\n            return state;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}