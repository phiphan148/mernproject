{"ast":null,"code":"import _slicedToArray from \"/Users/PhiPhan/Documents/Ubiqum/reactjs/mernproject/frontEnd/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction fetchCities() {\n  return function (dispatch) {\n    dispatch(fetchPostsRequest());\n    return fetchPosts().then(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          response = _ref2[0],\n          json = _ref2[1];\n\n      if (response.status === 200) {\n        dispatch(fetchPostsSuccess(json));\n      } else {\n        dispatch(fetchPostsError());\n      }\n    });\n  };\n}\n\nfunction fetchPosts() {\n  var URL = \"\";\n  return fetch(URL, {\n    method: 'GET'\n  }).then(function (response) {\n    return Promise.all([response, response.json()]);\n  });\n}","map":{"version":3,"sources":["/Users/PhiPhan/Documents/Ubiqum/reactjs/mernproject/frontEnd/src/actions/cityActions.js"],"names":["fetchCities","dispatch","fetchPostsRequest","fetchPosts","then","response","json","status","fetchPostsSuccess","fetchPostsError","URL","fetch","method","Promise","all"],"mappings":";;AAAA,SAASA,WAAT,GAAuB;AACnB,SAAO,UAACC,QAAD,EAAc;AACjBA,IAAAA,QAAQ,CAACC,iBAAiB,EAAlB,CAAR;AACA,WAAOC,UAAU,GAAGC,IAAb,CAAkB,gBAAqB;AAAA;AAAA,UAAnBC,QAAmB;AAAA,UAATC,IAAS;;AAC1C,UAAGD,QAAQ,CAACE,MAAT,KAAoB,GAAvB,EAA2B;AACvBN,QAAAA,QAAQ,CAACO,iBAAiB,CAACF,IAAD,CAAlB,CAAR;AACH,OAFD,MAGI;AACAL,QAAAA,QAAQ,CAACQ,eAAe,EAAhB,CAAR;AACH;AACJ,KAPM,CAAP;AAQH,GAVD;AAWH;;AAED,SAASN,UAAT,GAAsB;AAClB,MAAMO,GAAG,GAAG,EAAZ;AACA,SAAOC,KAAK,CAACD,GAAD,EAAM;AAAEE,IAAAA,MAAM,EAAE;AAAV,GAAN,CAAL,CACFR,IADE,CACI,UAAAC,QAAQ;AAAA,WAAIQ,OAAO,CAACC,GAAR,CAAY,CAACT,QAAD,EAAWA,QAAQ,CAACC,IAAT,EAAX,CAAZ,CAAJ;AAAA,GADZ,CAAP;AAEH","sourcesContent":["function fetchCities() {\n    return (dispatch) => {\n        dispatch(fetchPostsRequest());\n        return fetchPosts().then(([response, json]) =>{\n            if(response.status === 200){\n                dispatch(fetchPostsSuccess(json))\n            }\n            else{\n                dispatch(fetchPostsError())\n            }\n        })\n    }\n}\n\nfunction fetchPosts() {\n    const URL = \"\";\n    return fetch(URL, { method: 'GET'})\n        .then( response => Promise.all([response, response.json()]));\n}\n"]},"metadata":{},"sourceType":"module"}