{"ast":null,"code":"import _slicedToArray from \"/Users/PhiPhan/Documents/Ubiqum/reactjs/mernproject/frontEnd/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nexport function fetchCitiesRedux() {\n  return function (dispatch) {\n    dispatch(fetchCitiesRequest());\n    return fetchCities().then(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          response = _ref2[0],\n          json = _ref2[1];\n\n      if (response.status === 200) {\n        dispatch(fetchCitiesSuccess(json));\n      } else {\n        dispatch(fetchCitiesError());\n      }\n    });\n  };\n}\n;\nexport var fetchCities = function fetchCities() {\n  var URL = \"http://localhost:5000/cities\";\n  return fetch(URL, {\n    method: 'GET'\n  }).then(function (response) {\n    return Promise.all([response, response.json()]);\n  });\n};\nexport var fetchCitiesRequest = function fetchCitiesRequest() {\n  return {\n    type: \"FETCH_REQUEST\"\n  };\n};\nexport var fetchCitiesSuccess = function fetchCitiesSuccess(payload) {\n  return {\n    type: \"FETCH_SUCCESS\",\n    payload: payload\n  };\n};\nexport var fetchCitiesError = function fetchCitiesError() {\n  return {\n    type: \"FETCH_ERROR\"\n  };\n};","map":{"version":3,"sources":["/Users/PhiPhan/Documents/Ubiqum/reactjs/mernproject/frontEnd/src/actions/cityActions.js"],"names":["fetchCitiesRedux","dispatch","fetchCitiesRequest","fetchCities","then","response","json","status","fetchCitiesSuccess","fetchCitiesError","URL","fetch","method","Promise","all","type","payload"],"mappings":";AAAA,OAAO,SAASA,gBAAT,GAA4B;AAC/B,SAAO,UAACC,QAAD,EAAc;AACjBA,IAAAA,QAAQ,CAACC,kBAAkB,EAAnB,CAAR;AACA,WAAOC,WAAW,GAAGC,IAAd,CAAmB,gBAAqB;AAAA;AAAA,UAAnBC,QAAmB;AAAA,UAATC,IAAS;;AAC3C,UAAGD,QAAQ,CAACE,MAAT,KAAoB,GAAvB,EAA2B;AACvBN,QAAAA,QAAQ,CAACO,kBAAkB,CAACF,IAAD,CAAnB,CAAR;AACH,OAFD,MAGI;AACAL,QAAAA,QAAQ,CAACQ,gBAAgB,EAAjB,CAAR;AACH;AACJ,KAPM,CAAP;AAQH,GAVD;AAWH;AAAA;AAED,OAAO,IAAMN,WAAW,GAAG,SAAdA,WAAc,GAAK;AAC5B,MAAMO,GAAG,GAAG,8BAAZ;AACA,SAAOC,KAAK,CAACD,GAAD,EAAM;AAAEE,IAAAA,MAAM,EAAE;AAAV,GAAN,CAAL,CACFR,IADE,CACI,UAAAC,QAAQ;AAAA,WAAIQ,OAAO,CAACC,GAAR,CAAY,CAACT,QAAD,EAAWA,QAAQ,CAACC,IAAT,EAAX,CAAZ,CAAJ;AAAA,GADZ,CAAP;AAEH,CAJM;AAMP,OAAO,IAAMJ,kBAAkB,GAAE,SAApBA,kBAAoB,GAAK;AAClC,SAAO;AACHa,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,IAAMP,kBAAkB,GAAG,SAArBA,kBAAqB,CAACQ,OAAD,EAAY;AAC1C,SAAO;AACHD,IAAAA,IAAI,EAAE,eADH;AAEHC,IAAAA,OAAO,EAAPA;AAFG,GAAP;AAIH,CALM;AAOP,OAAO,IAAMP,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAK;AACjC,SAAO;AACHM,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJM","sourcesContent":["export function fetchCitiesRedux (){\n    return (dispatch) => {\n        dispatch(fetchCitiesRequest());\n        return fetchCities().then(([response, json]) =>{\n            if(response.status === 200){\n                dispatch(fetchCitiesSuccess(json))\n            }\n            else{\n                dispatch(fetchCitiesError())\n            }\n        })\n    }\n};\n\nexport const fetchCities = () =>{\n    const URL = \"http://localhost:5000/cities\";\n    return fetch(URL, { method: 'GET'})\n        .then( response => Promise.all([response, response.json()]));\n};\n\nexport const fetchCitiesRequest =() =>{\n    return {\n        type: \"FETCH_REQUEST\"\n    }\n};\n\nexport const fetchCitiesSuccess = (payload) =>{\n    return {\n        type: \"FETCH_SUCCESS\",\n        payload\n    }\n};\n\nexport const fetchCitiesError = () =>{\n    return {\n        type: \"FETCH_ERROR\"\n    }\n}\n"]},"metadata":{},"sourceType":"module"}