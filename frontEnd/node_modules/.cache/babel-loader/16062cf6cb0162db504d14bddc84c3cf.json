{"ast":null,"code":"import _slicedToArray from \"/Users/PhiPhan/Documents/Ubiqum/reactjs/mernproject/frontEnd/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nexport function fetchProducts() {\n  return function (dispatch) {\n    dispatch(fetchProductsBegin());\n    return fetchCities().then(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          response = _ref2[0],\n          json = _ref2[1];\n\n      if (response.status === 200) {\n        dispatch(fetchProductsSuccess(json));\n      } else {\n        dispatch(fetchProductsFailure());\n      }\n    });\n  };\n}\n;\nexport var fetchCities = function fetchCities() {\n  var URL = \"http://localhost:5000/cities\";\n  return fetch(URL, {\n    method: 'GET'\n  }).then(function (response) {\n    return Promise.all([response, response.json()]);\n  });\n}; //\n// export const fetchCitiesRequest =() =>{\n//     return {\n//         type: \"FETCH_REQUEST\"\n//     }\n// };\n//\n// export const fetchCitiesSuccess = (payload) =>{\n//     return {\n//         type: \"FETCH_SUCCESS\",\n//         payload\n//     }\n// };\n//\n// export const fetchCitiesError = () =>{\n//     return {\n//         type: \"FETCH_ERROR\"\n//     }\n// };\n// function getProducts() {\n//     return fetch(\"/products\")\n//         .then(handleErrors)\n//         .then(res => res.json());\n// }\n//\n// function fakeGetProducts() {\n//     return new Promise(resolve => {\n//         // Resolve after a timeout so we can see the loading indicator\n//         setTimeout(\n//             () =>\n//                 resolve({\n//                     products: [\n//                         {\n//                             id: 0,\n//                             name: \"Apple\"\n//                         },\n//                         {\n//                             id: 1,\n//                             name: \"Bananas\"\n//                         },\n//                         {\n//                             id: 2,\n//                             name: \"Strawberries\"\n//                         }\n//                     ]\n//                 }),\n//             1000\n//         );\n//     });\n// }\n//\n// export function fetchProducts() {\n//     return dispatch => {\n//         dispatch(fetchProductsBegin());\n//         return fakeGetProducts()\n//             .then(json => {\n//                 dispatch(fetchProductsSuccess(json.products));\n//                 return json.products;\n//             })\n//             .catch(error =>\n//                 dispatch(fetchProductsFailure(error))\n//             );\n//     };\n// }\n// Handle HTTP errors since fetch won't.\n\nfunction handleErrors(response) {\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n\n  return response;\n}\n\nexport var FETCH_PRODUCTS_BEGIN = \"FETCH_PRODUCTS_BEGIN\";\nexport var FETCH_PRODUCTS_SUCCESS = \"FETCH_PRODUCTS_SUCCESS\";\nexport var FETCH_PRODUCTS_FAILURE = \"FETCH_PRODUCTS_FAILURE\";\nexport var fetchProductsBegin = function fetchProductsBegin() {\n  return {\n    type: FETCH_PRODUCTS_BEGIN\n  };\n};\nexport var fetchProductsSuccess = function fetchProductsSuccess(products) {\n  return {\n    type: FETCH_PRODUCTS_SUCCESS,\n    payload: {\n      products: products\n    }\n  };\n};\nexport var fetchProductsFailure = function fetchProductsFailure(error) {\n  return {\n    type: FETCH_PRODUCTS_FAILURE,\n    payload: {\n      error: error\n    }\n  };\n};","map":{"version":3,"sources":["/Users/PhiPhan/Documents/Ubiqum/reactjs/mernproject/frontEnd/src/actions/cityActions.js"],"names":["fetchProducts","dispatch","fetchProductsBegin","fetchCities","then","response","json","status","fetchProductsSuccess","fetchProductsFailure","URL","fetch","method","Promise","all","handleErrors","ok","Error","statusText","FETCH_PRODUCTS_BEGIN","FETCH_PRODUCTS_SUCCESS","FETCH_PRODUCTS_FAILURE","type","products","payload","error"],"mappings":";AAAA,OAAO,SAASA,aAAT,GAAyB;AAC5B,SAAO,UAACC,QAAD,EAAc;AACjBA,IAAAA,QAAQ,CAACC,kBAAkB,EAAnB,CAAR;AACA,WAAOC,WAAW,GAAGC,IAAd,CAAmB,gBAAqB;AAAA;AAAA,UAAnBC,QAAmB;AAAA,UAATC,IAAS;;AAC3C,UAAGD,QAAQ,CAACE,MAAT,KAAoB,GAAvB,EAA2B;AACvBN,QAAAA,QAAQ,CAACO,oBAAoB,CAACF,IAAD,CAArB,CAAR;AACH,OAFD,MAGI;AACAL,QAAAA,QAAQ,CAACQ,oBAAoB,EAArB,CAAR;AACH;AACJ,KAPM,CAAP;AAQH,GAVD;AAWH;AAAA;AAED,OAAO,IAAMN,WAAW,GAAG,SAAdA,WAAc,GAAK;AAC5B,MAAMO,GAAG,GAAG,8BAAZ;AACA,SAAOC,KAAK,CAACD,GAAD,EAAM;AAAEE,IAAAA,MAAM,EAAE;AAAV,GAAN,CAAL,CACFR,IADE,CACI,UAAAC,QAAQ;AAAA,WAAIQ,OAAO,CAACC,GAAR,CAAY,CAACT,QAAD,EAAWA,QAAQ,CAACC,IAAT,EAAX,CAAZ,CAAJ;AAAA,GADZ,CAAP;AAEH,CAJM,C,CAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,SAASS,YAAT,CAAsBV,QAAtB,EAAgC;AAC5B,MAAI,CAACA,QAAQ,CAACW,EAAd,EAAkB;AACd,UAAMC,KAAK,CAACZ,QAAQ,CAACa,UAAV,CAAX;AACH;;AACD,SAAOb,QAAP;AACH;;AAED,OAAO,IAAMc,oBAAoB,GAAG,sBAA7B;AACP,OAAO,IAAMC,sBAAsB,GAC/B,wBADG;AAEP,OAAO,IAAMC,sBAAsB,GAC/B,wBADG;AAGP,OAAO,IAAMnB,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,SAAO;AACrCoB,IAAAA,IAAI,EAAEH;AAD+B,GAAP;AAAA,CAA3B;AAIP,OAAO,IAAMX,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAe,QAAQ;AAAA,SAAK;AAC7CD,IAAAA,IAAI,EAAEF,sBADuC;AAE7CI,IAAAA,OAAO,EAAE;AAAED,MAAAA,QAAQ,EAARA;AAAF;AAFoC,GAAL;AAAA,CAArC;AAKP,OAAO,IAAMd,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAgB,KAAK;AAAA,SAAK;AAC1CH,IAAAA,IAAI,EAAED,sBADoC;AAE1CG,IAAAA,OAAO,EAAE;AAAEC,MAAAA,KAAK,EAALA;AAAF;AAFiC,GAAL;AAAA,CAAlC","sourcesContent":["export function fetchProducts (){\n    return (dispatch) => {\n        dispatch(fetchProductsBegin());\n        return fetchCities().then(([response, json]) =>{\n            if(response.status === 200){\n                dispatch(fetchProductsSuccess(json))\n            }\n            else{\n                dispatch(fetchProductsFailure())\n            }\n        })\n    }\n};\n\nexport const fetchCities = () =>{\n    const URL = \"http://localhost:5000/cities\";\n    return fetch(URL, { method: 'GET'})\n        .then( response => Promise.all([response, response.json()]));\n};\n//\n// export const fetchCitiesRequest =() =>{\n//     return {\n//         type: \"FETCH_REQUEST\"\n//     }\n// };\n//\n// export const fetchCitiesSuccess = (payload) =>{\n//     return {\n//         type: \"FETCH_SUCCESS\",\n//         payload\n//     }\n// };\n//\n// export const fetchCitiesError = () =>{\n//     return {\n//         type: \"FETCH_ERROR\"\n//     }\n// };\n\n// function getProducts() {\n//     return fetch(\"/products\")\n//         .then(handleErrors)\n//         .then(res => res.json());\n// }\n//\n// function fakeGetProducts() {\n//     return new Promise(resolve => {\n//         // Resolve after a timeout so we can see the loading indicator\n//         setTimeout(\n//             () =>\n//                 resolve({\n//                     products: [\n//                         {\n//                             id: 0,\n//                             name: \"Apple\"\n//                         },\n//                         {\n//                             id: 1,\n//                             name: \"Bananas\"\n//                         },\n//                         {\n//                             id: 2,\n//                             name: \"Strawberries\"\n//                         }\n//                     ]\n//                 }),\n//             1000\n//         );\n//     });\n// }\n//\n// export function fetchProducts() {\n//     return dispatch => {\n//         dispatch(fetchProductsBegin());\n//         return fakeGetProducts()\n//             .then(json => {\n//                 dispatch(fetchProductsSuccess(json.products));\n//                 return json.products;\n//             })\n//             .catch(error =>\n//                 dispatch(fetchProductsFailure(error))\n//             );\n//     };\n// }\n\n// Handle HTTP errors since fetch won't.\nfunction handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n    return response;\n}\n\nexport const FETCH_PRODUCTS_BEGIN = \"FETCH_PRODUCTS_BEGIN\";\nexport const FETCH_PRODUCTS_SUCCESS =\n    \"FETCH_PRODUCTS_SUCCESS\";\nexport const FETCH_PRODUCTS_FAILURE =\n    \"FETCH_PRODUCTS_FAILURE\";\n\nexport const fetchProductsBegin = () => ({\n    type: FETCH_PRODUCTS_BEGIN\n});\n\nexport const fetchProductsSuccess = products => ({\n    type: FETCH_PRODUCTS_SUCCESS,\n    payload: { products }\n});\n\nexport const fetchProductsFailure = error => ({\n    type: FETCH_PRODUCTS_FAILURE,\n    payload: { error }\n});\n\n"]},"metadata":{},"sourceType":"module"}